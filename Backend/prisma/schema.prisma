generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entry {
  id         Int      @id @default(autoincrement())
  content    String
  updatedAt  DateTime @updatedAt
  snapshotId String
  fieldId    Int?
  entryId    Int?
  isFile     Boolean  @default(false)
  required   Boolean  @default(false)
  Entry      Entry?   @relation("EntryToEntry", fields: [entryId], references: [id])
  entries    Entry[]  @relation("EntryToEntry")
}

model TemplateEntries {
  id        Int      @id @default(autoincrement())
  content   String
  updatedAt DateTime @updatedAt
  fieldId   Int?
  isFile    Boolean  @default(false)
}

model FailedLoginAttempt {
  id        Int      @id @default(autoincrement())
  userId    String
  timestamp DateTime @default(now())
  isblocked Boolean  @default(false)
  attempts  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id                   String                 @id @default(cuid())
  name                 String
  email                String                 @unique
  password             String
  verified             Boolean                @default(false)
  PasswordResetRequest PasswordResetRequest[]
  Referral             Referral[]
  VerificationRequest  VerificationRequest[]
  failedLoginAttempts  FailedLoginAttempt[]
  JobPosting           JobPosting[]
}

enum ApplicationStatus {
  PENDING
  REJECTED
  ACCEPTED
}

model ApplicationField1 {
  id              String @id @default(cuid())
  description     String @default("Biodata")
  completepercent Float  @default(0)

  fullName                 String
  dateOfBirth              String
  proofOfDateOfBirth       String
  gender                   String // Should be one of: 'Male', 'Female', 'Other'
  maritalStatus            String // Should be one of: 'Single', 'Married', 'Divorced', 'Widowed'
  permanentAddress         String
  addressForCorrespondence String
  pinCode                  String  @db.VarChar(6)
  emailId                  String
  fathersOrHusbandsName    String
  mobileNo                 String
  advtNo                   String // Should be one of: 'Advt. No. 01/2021', 'Advt. No. 02/2021', 'Advt. No. 03/2021'
  fieldOfSpecialization    String
  citizenshipType          String // Should be one of: 'By Birth', 'By Domicile'
  category                 String // Should be one of: 'General', 'EWS', 'OBC', 'SC', 'ST'
  pwdCategory              String // Should be one of: 'Yes', 'No'
  presentBasicPay          String?
  passportPhoto            String
  timeNeededBeforeJoining  String
  mothersName              String
  ageAsOnClosingDate       String
  signatureOfApplicant     String

  createdAt    DateTime   @default(now())
  jobpostingid String     @unique
  JobPosting   JobPosting @relation(fields: [jobpostingid], references: [id])
}

model ApplicationField2 {
  id              String @id @default(cuid())
  description     String @default("Education & Employment")
  completepercent Float  @default(0)

  // Store Education & Employment details as JSON
  education_details  Json
  employment_details Json

  // Relation with JobPosting
  createdAt    DateTime   @default(now())
  jobpostingid String     @unique
  JobPosting   JobPosting @relation(fields: [jobpostingid], references: [id])
}

model ApplicationField3 {
  id                                String     @id @default(cuid())
  description                       String     @default("Project / Publication")
  completepercent                   Float      @default(0)
  pgProjects                        String
  phdCompleted                      String
  phdOngoing                        String
  sponsoredProjects                 String
  consultancyProjects               String
  patents                           String
  booksPublished                    String
  bookChaptersPublished             String
  researchExperience                String
  patentsList                       String
  journalPublications               String
  conferencePublications            String
  researchPublications              Json
  jobpostingid                      String     @unique
  JobPosting                        JobPosting @relation(fields: [jobpostingid], references: [id])
}

model ApplicationField4 {
  id              String @id @default(cuid())
  description     String @default("Academic Background")
  completepercent Float  @default(0)

  teachingExperience    String
  coursesTaught         String
  specialization        String
  specializationDetails String
  phdThesisTitle        String
  phdSupervisor         String
  phdWorkDocument       String
  labExperienceDocument String
  coSupervisor          String?
  thesisSubmissionDate  String
  vivaVoceDate          String

  createdAt    DateTime   @default(now())
  jobpostingid String     @unique
  JobPosting   JobPosting @relation(fields: [jobpostingid], references: [id])
}

model ApplicationField5 {
  id                        String     @id @default(cuid())
  description               String     @default("Awards and Recognitions")
  completepercent           Float      @default(0)
  awardsHonours             String
  fellowProfessionalBody    String
  memberProfessionalBody    String
  editorialBoardMemberships String
  seminarsOrganized         String
  jobpostingid              String     @unique
  JobPosting                JobPosting @relation(fields: [jobpostingid], references: [id])
}

model ApplicationField6 {
  id                  String @id @default(cuid())
  description         String @default("Additional Info")
  completepercent     Float  @default(0)
  researchPlan        Json
  previousApplication String
  additionalRemarks   String
  referrer1           Json
  referrer2           Json
  referrer3           Json
  legalProceeding     String
  courtCase           String
  declaration         String

  jobpostingid String     @unique
  createdAt    DateTime   @default(now())
  JobPosting   JobPosting @relation(fields: [jobpostingid], references: [id])
}

model PasswordResetRequest {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  count     Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
}

model Referral {
  id        String          @id @default(cuid())
  userId    String
  submitted Boolean         @default(false)
  email     String?         @unique
  address   String?
  user      User            @relation(fields: [userId], references: [id])
  entries   ReferralEntry[]
}

model ReferralField {
  id            Int             @id @default(autoincrement())
  title         String
  description   String?
  type          String
  allowFile     Boolean         @default(false)
  ReferralEntry ReferralEntry[]
}

model ReferralEntry {
  id         Int           @id @default(autoincrement())
  content    String
  updatedAt  DateTime      @updatedAt
  fieldId    Int
  referralId String?
  isFile     Boolean       @default(false)
  field      ReferralField @relation(fields: [fieldId], references: [id])
  Referral   Referral?     @relation(fields: [referralId], references: [id])
}

model Admin {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String

  @@index([email])
}

model JobPosting {
  id                String              @id @default(cuid())
  department        String
  position          String
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  completepercent   Float               @default(0)
  status            ApplicationStatus   @default(PENDING)
  ApplicationField1 ApplicationField1[]
  ApplicationField2 ApplicationField2[]
  ApplicationField3 ApplicationField3[]
  ApplicationField4 ApplicationField4[]
  ApplicationField5 ApplicationField5[]
  ApplicationField6 ApplicationField6[]
}

model VerificationRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  count     Int      @default(0)
  User      User     @relation(fields: [userId], references: [id])
}
